int amountofwobs = 3;
String currentlyActive="";
int mainParameter = -1;
int secondaryParameter =-1;

import themidibus.*; //Import the library

MidiBus[] bus; //array for every bus
String[] busses;

import oscP5.*;
import netP5.*;

OscP5 oscP5;
NetAddress myRemoteLocation;

void setup() {
  size(400, 400);

  MidiBus.list(); // List all available Midi devices on STDOUT. This will show each device's index and name.

  bus = new MidiBus[amountofwobs];
  busses = new String[amountofwobs];
  for (int i=0; i<amountofwobs; i++) {
    bus[i]=new MidiBus(this, i, -1, "bus"+i);
    busses[i] = "bus"+i;
  }

  oscP5 = new OscP5(this, 12000);
  myRemoteLocation = new NetAddress("192.168.2.78", 12000);
}

void draw() {
  background(0);
  fill(255);
  text("currently active = "+currentlyActive, 100, 100);
  text("main parameter = "+mainParameter, 100, 200);
  text("secondary parameter = "+secondaryParameter, 100, 300);
}

void controllerChange(int channel, int number, int value, long timestamp, String bus_name) {
  // Receive a controllerChange
  println();
  println("Controller Change:");
  println("--------");
  println("Channel:"+channel);
  println("Number:"+number);
  println("Value:"+value);
  println("Recieved on Bus:"+bus_name);

  String adress = "";
  if (bus_name.equals(currentlyActive)) {
    adress = "main";
    mainParameter = value;
  } else {
    adress = "secondary";
    secondaryParameter = value;
  }

  OscMessage myMessage = new OscMessage(adress);
  myMessage.add(value);

  oscP5.send(myMessage, myRemoteLocation); 
  println("OSC mssg send: "+value+" to " + myRemoteLocation);
}

void noteOn(int channel, int pitch, int velocity, long timestamp, String bus_name) {
  println();
  println("Note On:");
  println("--------");
  println("Channel:"+channel);
  println("Pitch:"+pitch);
  println("Velocity:"+velocity);
  println("Timestamp:"+timestamp);
  println("Recieved on Bus:"+bus_name);

  if (currentlyActive.equals("")) {
    currentlyActive=bus_name;


    int currentWob =-1;
    for (int i=0; i<amountofwobs; i++) {
      if (currentlyActive.equals(busses[i]))currentWob=i;
    }
    OscMessage myMessage = new OscMessage("/currentwob");
    myMessage.add(currentWob);
    oscP5.send(myMessage, myRemoteLocation); 
    println("OSC mssg send currentWob: "+currentWob);
  }
}

void noteOff(int channel, int pitch, int velocity, long timestamp, String bus_name) {
  println();
  println("Note Off:");
  println("--------");
  println("Channel:"+channel);
  println("Pitch:"+pitch);
  println("Velocity:"+velocity);
  println("Timestamp:"+timestamp);
  println("Recieved on Bus:"+bus_name);
  if (bus_name.equals(currentlyActive)) {
    //reset the parameters
    currentlyActive="";
    mainParameter = -1;
    secondaryParameter =-1;
    
    OscMessage myMessage = new OscMessage("/currentwob");
    myMessage.add(-1);
    oscP5.send(myMessage, myRemoteLocation); 
    println("OSC mssg reset currentWob");
  }
}

void delay(int time) {
  int current = millis();
  while (millis () < current+time) Thread.yield();
}

void oscEvent(OscMessage theOscMessage) {
  /* print the address pattern and the typetag of the received OscMessage */
  print("### received an osc message.");
  println(" addrpattern: "+theOscMessage.addrPattern());
}